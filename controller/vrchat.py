"""This module controls the VRChat client."""
if __name__ == "__main__":
    import sys
    import os

    ROOT_DIR = os.path.abspath(os.path.join(os.path.dirname(__file__), ".."))
    sys.path.append(ROOT_DIR)

from pathlib import Path
import textwrap
from typing import List
import threading

import time
from pythonosc.udp_client import SimpleUDPClient

from controller.create_logger import create_logger

# Create logger
module_logger = create_logger(
    logger_name=__name__,
    logger_filename='vrchat.log',
    log_directory='logs',
    add_date_to_filename=False
)

class VRChat:
    """This class controls the VRChat client."""

    # Clas constants for VRChat connection
    IP = "127.0.0.1"
    PORT = 9000  # send data to VRChat client

    # VRChat limits the number of characters that can be sent to 144 per chat bubble.
    TEXT_LIMIT = 144

    # Create client
    client = SimpleUDPClient(IP, PORT)

    def __init__(self):
        """The constructor for the VRChat class."""

        self.last_sent_text = ""

        # Create logger
        self.logger = module_logger

    def send_text(self, text: str = ""):
        """This method sends the text to the VRChat client."""

        address = "/chatbox/input"
        # If self.text is not empty, send self.text to the VRChat client.
        if text != "":
            # VRChat limits the number of characters that can be sent to 144 per chat bubble.
            if len(text) > self.TEXT_LIMIT:
                self.logger.error(
                    "Text length %d exceeds text limit %d", len(text), self.TEXT_LIMIT
                )
                raise ValueError(
                    "Text length {} exceeds text limit {}".format(
                        len(text), self.TEXT_LIMIT
                    )
                )
            self.logger.debug("Sending text: %s", repr(text))
            self.client.send_message(address, [text, True, False])
            self.last_sent_text = text
        else:
            self.logger.error("Text cannot be empty.")
            raise ValueError("Text cannot be empty.")

    def split_string(self, text: str, text_limit: int = TEXT_LIMIT):
        """Splits a string into a list of strings with a maximum width of `max_width`,
        while trying to keep words together."""
        self.logger.info("splitting: %s", repr(text))
        result = textwrap.wrap(text, text_limit, break_long_words=False)
        self.logger.debug("result: %s", repr(result))
        return result

    def _send_text_list(self, text_list: List[str], duration_per_message: float):
        """This method sends the text generated by AI to VRChat client inside a list, each message will be sent after duration seconds."""
        for text in text_list:
            self.send_text(text)
            self.logger.debug("Sleeping for %s seconds", repr(duration_per_message))
            time.sleep(duration_per_message)

    def send_text_list(self, text_list: List[str], duration: float = 3.0):
        """This method sends the text generated by AI to VRChat client inside a list, each message will be sent after duration seconds."""
        # Calculates duration per message
        duration_per_message = duration / len(text_list)

        self.logger.debug("duration_per_message: %s", repr(duration_per_message))

        # Create thread to avoid stopping the main thread when time.sleep is called.
        thread = threading.Thread(
            target=self._send_text_list, args=(text_list, duration_per_message)
        )
        thread.start()

def main():
    # Create VRChat object
    vrchat = VRChat()

    # Send text
    vrchat.send_text("Hello World!")

    # Delete VRChat object
    del vrchat

if __name__ == "__main__":
    main()